# General compilation:
#   $ go build .
#   $ ./jet --lib_path="./lib/" --gen_c "examples/TestTetris.jet"
#
# Compilation for Linux/Windows utilizing MinGW64:
#   $ gcc -o examples/.jet/TestTetris examples/.jet/TestTetris__jet.c -lraylib -lgdi32 -lwinmm
#
# Compilation for native Windows using Clang:
#   $ clang .\TestTetris__jet.c .\raylib.lib -o tetris.exe -O2 -Wno-everything \
#       -lGdi32 -lWinMM -lshell32 -lUser32 -Xlinker /NODEFAULTLIB:libcmt

struct Color {
    r u8
    g u8
    b u8
    a u8
}

struct Rectangle {
    x      f32
    y      f32
    width  f32
    height f32
}

var Gray = Color.{ r = 130; g = 130; b = 130; a = 255 }
var LineColor = Color.{ r = 200; g = 200; b = 200; a = 255 }

@(ExternC) func InitWindow(width int, height int, title *char)
@(ExternC) func CloseWindow()
@(ExternC) func BeginDrawing()
@(ExternC) func EndDrawing()
@(ExternC) func WindowShouldClose() bool
@(ExternC) func ClearBackground(color Color)
@(ExternC) func SetTargetFPS(fps int)
@(ExternC) func DrawLine(startPosX int, startPosY int, endPosX int, endPosY int, color Color)
@(ExternC) func DrawText(text *char, posX int, posY int, fontSize int, color Color) bool
@(ExternC) func DrawRectangleRec(rec Rectangle, color Color)
@(ExternC) func GetTime() f64
@(ExternC) func MeasureText(text *char, fontSize int) int
@(ExternC) func IsKeyPressed(key int) bool

const KeySpace = 32
const KeyW     = 87
const KeyA     = 65
const KeyS     = 83
const KeyD     = 68
const KeyR     = 82
const KeyDown  = 264
const KeyUp    = 265
const KeyLeft  = 263
const KeyRight = 262

@(ExternC) func malloc(size u64) pointer
@(ExternC) func rand() int
@(ExternC) func sprintf(stream *char, @(ConstC) format *char, args...) int

const CellSize            = 40
const PlayfieldHiddenRows = 40
const PlayfieldRows       = 20
const PlayfieldCols       = 10
const PaddingX            = 12
const PaddingY            = 22
const HeaderHeight        = 60

const ScreenWidth  = CellSize * PlayfieldCols + 2 * PaddingX
const ScreenHeight = CellSize * PlayfieldRows + 2 * PaddingY + HeaderHeight

const NumTetraminoes   = 7
const AutoDropDuration = 0.5

enum CellState {
    Empty
    Cyan
    Blue
    Red
    Orange
    Yellow
    Green
    Purple
}

enum GameState {
    Paused
    Playing
}

enum Action {
    AutoDrop
    Drop
    HardDrop
    Left
    None
    Right
    Rotate
    Restart
}

struct Tetramino {
    rotations [4]u32
    color     Color
    index     u8
}

struct TetraminoInstance {
    tetramino Tetramino
    rotation  int
    x         int
    y         int
}

struct Timer {
    lastTick f64
    duration f64
}

struct Shuffler {
    index u8
    order [NumTetraminoes]u8
}

struct Game {
    currentTetramino *TetraminoInstance
    scope            u64
    state            GameState
    autoDropTimer    Timer
    shuffler         Shuffler
}

# Globals

var CyanColor   = Color.{ r = 0x06; g = 0xb6; b = 0xd4; a = 0xff }
var BlueColor   = Color.{ r = 0x25; g = 0x63; b = 0xeb; a = 0xff }
var OrangeColor = Color.{ r = 0xea; g = 0x58; b = 0x0c; a = 0xff }
var YellowColor = Color.{ r = 0xfa; g = 0xcc; b = 0x15; a = 0xff }
var GreenColor  = Color.{ r = 0x22; g = 0xc5; b = 0x5e; a = 0xff }
var PurpleColor = Color.{ r = 0x93; g = 0x33; b = 0xea; a = 0xff }
var RedColor    = Color.{ r = 0xdc; g = 0x26; b = 0x26; a = 0xff }

var tetraminoColors [NumTetraminoes]Color = [
    CyanColor,
    BlueColor,
    RedColor,
    OrangeColor,
    YellowColor,
    GreenColor,
    PurpleColor,
]

var playfield [PlayfieldHiddenRows][PlayfieldCols]CellState
var tetraminoes [NumTetraminoes]Tetramino = [
    Tetramino.{
        rotations = [0x0F00, 0x2222, 0x00F0, 0x4444]
        color = CyanColor
        index = 0
    },
    Tetramino.{
        rotations = [0x0660, 0x0660, 0x0660, 0x0660]
        color = YellowColor
        index = 4
    },
    Tetramino.{
        rotations = [0x0E40, 0x4C40, 0x4E00, 0x4640]
        color = PurpleColor
        index = 6
    },
    Tetramino.{
        rotations = [0x06C0, 0x8C40, 0x06C0, 0x8C40]
        color = GreenColor
        index = 5
    },
    Tetramino.{
        rotations = [0x0C60, 0x4C80, 0x0C60, 0x4C80]
        color = RedColor
        index = 2
    },
    Tetramino.{
        rotations = [0x44C0, 0x8E00, 0x6440, 0x0E20]
        color = BlueColor
        index = 1
    },
    Tetramino.{
        rotations = [0x4460, 0x0E80, 0xC440, 0x2E00]
        color = OrangeColor
        index = 3
    },
]

func shuffle(shuffler *Shuffler) {
    var i = 0
    while i < NumTetraminoes {
        shuffler?.order[i] = @as(u8, i)
        i += 1
    }
    i = 0
    while i < NumTetraminoes {
        var j u8 = @as(u8, rand() % NumTetraminoes)
        var temp u8 = shuffler?.order[i]

        shuffler?.order[i] = shuffler?.order[j]
        shuffler?.order[j] = temp
        i += 1
    }
}

func nextTetramino(tetramino *TetraminoInstance, shuffler *Shuffler) {
    @assert(shuffler != @as(*Shuffler, 0))
    if shuffler?.index == NumTetraminoes {
        shuffle(shuffler)
        shuffler?.index = 0
    }

    @assert(tetramino != @as(*TetraminoInstance, 0))
    tetramino?.rotation  = 0
    tetramino?.x         = 3
    tetramino?.y         = 20
    tetramino?.tetramino = tetraminoes[shuffler?.order[shuffler?.index]]
    shuffler?.index     += 1
}

func initTimer(duration f64) Timer {
    Timer.{
        lastTick = GetTime()
        duration = duration
    }
}

func initPlayfield() {
    var i = 0
    while i < PlayfieldHiddenRows {
        var j = 0
        while j < PlayfieldCols {
            playfield[i][j] = CellState.Empty
            j = j + 1
        }
        i = i + 1
    }
}

func initGame() Game {
    var game = Game.{
        currentTetramino = @as(*TetraminoInstance, malloc(@sizeOf(TetraminoInstance)))
        scope = 0
        state = GameState.Paused
        autoDropTimer = initTimer(AutoDropDuration)
        shuffler = Shuffler.{
            index = 0
            order = [0, 0, 0, 0, 0, 0, 0]
        }
    }

    shuffle(&game.shuffler)
    nextTetramino(game.currentTetramino, &game.shuffler)
    initPlayfield()
    game
}

func timerHasElapsed(timer *Timer) bool {
    var now = GetTime()
    var result = false

    if now - timer?.lastTick >= timer?.duration {
        timer?.lastTick = now
        result = true
    }

    result
}

func renderScore(scope u64) {
    var buf [32]char
    var format = "Score: %llu"
    sprintf(&buf[0], @asPtr(format), scope)
    var textWidth = MeasureText(&buf[0], 24)
    var x = (ScreenWidth - textWidth) / 2
    var y = PaddingY
    DrawText(&buf[0], x, y, 24, Gray)
    ;;
}

func renderCell(x int, y int, color Color) {
    @assert(x >= 0 and x < PlayfieldCols)
    @assert(y >= 0 and y < PlayfieldRows)
    var cellX = PaddingX + x * CellSize
    var cellY = ScreenHeight - PaddingY - (y + 1) * CellSize
    var cell  = Rectangle.{
        x      = @as(f32, cellX) + 0.5
        y      = @as(f32, cellY) + 0.5
        width  = @as(f32, CellSize) - 0.5
        height = @as(f32, CellSize) - 0.5
    }
    DrawRectangleRec(cell, color)
}

func renderGrid() {
    var i = 0
    while i <= PlayfieldRows {
        var y = ScreenHeight - PaddingY - i*CellSize
        DrawLine(PaddingX, y, ScreenWidth - PaddingX, y, LineColor)
        i += 1
    }
    i = 0
    while i <= PlayfieldCols {
        var x = PaddingX + i*CellSize
        DrawLine(x, PaddingY + HeaderHeight, x, ScreenHeight - PaddingY, LineColor)
        i += 1
    }
    i = 0
    while i < PlayfieldRows {
        var j = 0
        while j < PlayfieldCols {
            if playfield[i][j] != CellState.Empty {
                renderCell(j, i, tetraminoColors[@as(int, playfield[i][j]) - 1])
            }
            j += 1
        }
        i += 1
    }
}

# TODO use array result
func getCoords(instance *TetraminoInstance, coords *u8) {
    @assert(instance != @as(*TetraminoInstance, 0))

    var i = 0
    var y = 0
    while y < 4 {
        var row u32 = instance?.tetramino.rotations[instance?.rotation] >> @as(u32, y * 4)
        var x = 0

        while x < 4 {
            if (row & 0x1) != 0 {
                var _x = instance?.x + x
                var _y = instance?.y - y
                # coords[i] = _x
                *@as(*u8, @as(u64, coords) + @as(u64, i)) = @as(u8, _x)
                # coords[i + 1] = _y
                *@as(*u8, @as(u64, coords) + @as(u64, i) + 1) = @as(u8, _y)
                i += 2
            }
            # row >>= 1
            row = row >> 1
            x += 1
        }

        y += 1
    }

    @assert(i == 8)
}

func canRenderTetrominoInstance(instance *TetraminoInstance, renderCoords *u8) bool {
    getCoords(instance, renderCoords)

    var i = 0
    var canRender = true
    while i < 8 {
        # var x u8 = renderCoords[i]
        var x u8 = *@as(*u8, @as(u64, renderCoords) + @as(u64, i))
        # var y u8 = renderCoords[i + 1]
        var y u8 = *@as(*u8, @as(u64, renderCoords) + @as(u64, i) + 1)

        if ((x < 0 or x >= PlayfieldCols) or
            (y < 0 or y >= PlayfieldRows) or
            playfield[y][x] != CellState.Empty) {
            canRender = false
            break
        }

        i += 2
    }
    canRender
}

func resolveClears(game *Game) {
    var clearCount = 0
    var i = 0
    while i < PlayfieldRows {
        var rowIsFull = true
        var j = 0

        while j < PlayfieldCols {
            if playfield[i][j] == CellState.Empty {
                rowIsFull = false
                break
            }
            j += 1
        }

        if rowIsFull {
            j = 0
            while j < PlayfieldCols {
                playfield[i][j] = CellState.Empty
                j += 1
            }

            var k = i + 1
            while k < PlayfieldRows {
                j = 0
                while j < PlayfieldCols {
                    playfield[k - 1][j] = playfield[k][j]
                    j += 1
                }
                k += 1
            }

            i -= 1
            clearCount += 1
        }

        i += 1
    }

    var points [4]u16 = [100, 300, 500, 800]

    if clearCount > 0 {
        game?.scope += points[clearCount - 1]
    }
}

func lockTetraminoInstance(instance *TetraminoInstance, game *Game) {
    var renderCoords [8]u8
    if canRenderTetrominoInstance(instance, &renderCoords[0]) {
        var i = 0
        while i < 8 {
            var x u8 = renderCoords[i]
            var y u8 = renderCoords[i + 1]
            playfield[y][x] = @as(CellState, instance?.tetramino.index + 1)
            i += 2
        }
        resolveClears(game)
        nextTetramino(game?.currentTetramino, &game?.shuffler)
    }
}

func handleInput(game *Game) Action {
    var action = Action.None

    if timerHasElapsed(&game?.autoDropTimer) {
        action = Action.AutoDrop
    } else if IsKeyPressed(KeySpace) {
        action = Action.HardDrop
    } else if IsKeyPressed(KeyS) or IsKeyPressed(KeyDown) {
        action = Action.Drop
    } else if IsKeyPressed(KeyW) or IsKeyPressed(KeyUp) {
        action = Action.Rotate
    } else if IsKeyPressed(KeyA) or IsKeyPressed(KeyLeft) {
        action = Action.Left
    } else if IsKeyPressed(KeyD) or IsKeyPressed(KeyRight) {
        action = Action.Right
    } else if game?.state == GameState.Paused and IsKeyPressed(KeyR) {
        action = Action.Restart
    }

    action
}

func handleAction(action Action, game *Game) {
    if game?.state == GameState.Paused {
        if action == Action.Restart {
            *game = initGame()
            game?.state = GameState.Playing
        }
    } else {
        var currentCoords [8]u8
        var renderCoords [8]u8

        getCoords(game?.currentTetramino, &currentCoords[0])
        var request TetraminoInstance = *game?.currentTetramino

        if action == Action.Rotate {
            request.rotation = (request.rotation + 1) % 4
        } else if action == Action.Left {
            request.x -= 1
        } else if action == Action.Right {
            request.x += 1
        } else if action == Action.AutoDrop {
            request.y -= 1
        } else if action == Action.HardDrop {
            while canRenderTetrominoInstance(&request, &renderCoords[0]) {
                request.y -= 1
            }
            request.y += 1
        } else if action == Action.Drop {
            request.y -= 2
        }

        var i = 0
        while i < 8 {
            var x u8 = currentCoords[i]
            var y u8 = currentCoords[i + 1]
            playfield[y][x] = CellState.Empty
            i += 2
        }

        var canRender = canRenderTetrominoInstance(&request, &renderCoords[0])

        if canRender {
            game?.currentTetramino?.x = request.x
            game?.currentTetramino?.y = request.y
            game?.currentTetramino?.rotation = request.rotation
        }

        if action == Action.HardDrop or
        (action == Action.AutoDrop and !canRender) {
            lockTetraminoInstance(game?.currentTetramino, game)
        }
    }
}

func renderTetrominoInstance(instance *TetraminoInstance) bool {
    var renderCoords [8]u8
    var rendered = false

    if canRenderTetrominoInstance(instance, &renderCoords[0]) {
        var i = 0
        while i < 8 {
            var x u8 = renderCoords[i]
            var y u8 = renderCoords[i + 1]
            renderCell(x, y, instance?.tetramino.color)
            i += 2
        }
        rendered = true
    }

    rendered
}

func renderGhostTetrominoInstance(instance *TetraminoInstance) {
    var renderCoords [8]u8

    if canRenderTetrominoInstance(instance, &renderCoords[0]) {
        var ghost = *instance
        ghost.tetramino.color.a = 120
        while canRenderTetrominoInstance(&ghost, &renderCoords[0]) {
            ghost.y -= 1
        }
        ghost.y += 1
        renderTetrominoInstance(&ghost)
        ;;
    }
}

func drawGameOver() {
    var textWidth = MeasureText("Game Over", 48)
    var x = (ScreenWidth - textWidth) / 2
    var y = ScreenHeight / 2
    DrawText("Game Over", x, y - 110, 48, Gray)
    DrawText("Press R to restart", x, y - 50, 24, Gray)
    ;; # Because 'DrawText' returns bool.
}

func checkGameOver(game *Game) {
    var i = 0
    while i < PlayfieldCols {
        if playfield[PlayfieldRows - 1][i] != CellState.Empty {
            drawGameOver()
            game?.state = GameState.Paused
        }
        i += 1
    }
}

func main() {
    InitWindow(ScreenWidth, ScreenHeight, "Tetris")
    SetTargetFPS(60)

    var bgColor = Color.{ r = 240; g = 240; b = 240; a = 255 }
    var game = initGame()
    game.state = GameState.Playing

    while !WindowShouldClose() {
        BeginDrawing()
        ClearBackground(bgColor)

        # Game related stuff
        renderScore(game.scope)
        renderGrid()
        handleAction(handleInput(&game), &game)
        checkGameOver(&game)
        renderTetrominoInstance(game.currentTetramino)
        renderGhostTetrominoInstance(game.currentTetramino)

        EndDrawing()
    }

    CloseWindow()
}
